generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  RESEARCHER
  REVIEWER
  ADMIN
  SUB_ADMIN
}

enum Level {
  UNDERGRADUATE
  PGD
  MSC
  PhD
}

enum Program {
  COMPUTER_SCIENCE
  ENVITONMENTAL_SCIENCE
  SCIENCE
  HEALTH
  MANAGEMENT
  HUMANITIES
}

enum Status {
  PENDING
  APPROVED
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname String
  lastname  String
  username  String  @unique
  email     String  @unique
  password  String  @unique
  avatar    String?
  role      Role
  level     Level
  program   Program

  userSubScription  UserSubscription?
  document          Document[]        @relation("DocumentOwner")
  reviewedDocuments Document[]        @relation("DocumentReviewer")
  comment           Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSubscription {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  stripeCustomerId       String?  @unique @map(name: "stripe_customer_id")
  stripePriceId          String?  @map(name: "stripe_price_id")
  stripeSubscriptionId   String?  @unique @map(name: "stripe_subscription_id")
  stripeCurrentPeriodEnd DateTime @map(name: "stripe_current_period_end")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Document {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name        String
  status      Status @default(PENDING)
  documentUrl String

  userId String @unique @db.ObjectId
  user   User   @relation("DocumentOwner", fields: [userId], references: [id], onDelete: Cascade)

  reviewerId String? @unique @db.ObjectId
  reviewer   User?   @relation("DocumentReviewer", fields: [reviewerId], references: [id], onDelete: SetNull)

  dateAssigned DateTime?

  comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  message String

  documentId String?   @db.ObjectId
  document   Document? @relation(fields: [documentId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
